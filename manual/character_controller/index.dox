/** \page character-controller Character Controller

A character controller is a physics object, which is designed to be able to be moved using human or computer inputs.

\subsection current-status Current Status

When you first start researching character controllers with bullet you'll probably initially be bombarded by many people asking how to build one, additionally if you start reading into these articles you'll start piecing together an image of the state of the character controller in bullet, needless to say it's not in the best state.

- btKinematicCharacterController (<a href="https://github.com/bulletphysics/bullet3/issues/167#issuecomment-566853354">No longer supported</a>)

\section kinematic-vs-dynamic Kinematics vs Dynamic

When it comes to character controllers there are two main types:

\subsection dynamic Dynamic

A dynamic character controller is thought of as a rigid body but unable to rotate around it's origin. This allows the body to interact with the phsics engine regularly, though these interactions may not always be predictable.

This type of controller doesn't have direct control over the bodies position, as it's position changes through impulses or forces. An easy way to remember this type of controller is that it's just a regular physics entity with some custom behavior. 

There are a few things to keep in mind with this type of controller:
- It may be difficult move your character controller to a specific location as you can only interact with it through forces
- To make it act like a "character", there will be situations where we have to hack in custom behavior to the object
	 - For example if we've modelled a stair set using a wedge, and the player attempts to climb up this wedge, since our character is just a regular physics object, they would start sliding down the wedge

The general summary of this is that to to create a dynamic character controller, you have to take a regular physics object and tweak it's behavior and disable features until it behaves as desired.

\subsection kinematic Kinematic

On the other hand a kinematic controller is one that cannot directly interact with physics objects unless it is written explicitly in the code. In order to make it actually interact with the physics world we need to define custom behavior so that if it starts intersecting a wall it is moved out of that state, or if it hits a ramp we move up the ramp instead of getting stuck.

This type of character controller can be good for a player that might make impossible movements such as turning corners incredibly fast and so on. To some extend character controllers are game dependent, but I believe having a solid capsule based kinematic character in bullet should be available.

\section btKinematicCharacterController btKinematicCharacterController 

As we mentioned previously the kinematic controller is not in a good state, see some of the current issues:

relevant issues:
- https://github.com/bulletphysics/bullet3/issues/4329
- https://github.com/bulletphysics/bullet3/discussions/3523
- https://github.com/bulletphysics/bullet3/issues/84
- https://github.com/bulletphysics/bullet3/issues/40

To help develop this class I recommend to first watch this video which should give you a basic understanding of what we have to do: https://youtu.be/s-99Z_W8bcQ, after that we can use godot's source code as a general guide line on what methods we'll need https://youtu.be/s-99Z_W8bcQ

\section a-simple-character-controller A Simple Character Controller

Until the kinematic character controller is supported again, we can create a dynamic character controller, the general outline for this will be to create a capsule shape object, make sure it's unable to fall over (like a tic tac placed on a table), and then apply forces to it.

resources:
- https://www.reddit.com/r/gamedev/comments/2og487/bullet_physics_player_controller_than_can_be/
- https://github.com/bulletphysics/bullet3/issues/1387
- https://github.com/Lumak/Urho3D-KinematicCharacterController/blob/master/Source/Samples/82_KinematicPlatform/KinematicCharacterController.cpp
- git@github.com:godotengine/godot.git (find the kinematic character controller)
- https://docs.godotengine.org/en/stable/classes/class_characterbody3d.html
- https://stackoverflow.com/questions/25605659/avoid-ground-collision-with-bullet/25725502#25725502 
- https://stackoverflow.com/questions/18345710/how-do-you-control-a-player-character-in-bullet-physics
- https://pybullet.org/Bullet/phpBB3/viewtopic.php?t=11927


*/
